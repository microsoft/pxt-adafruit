{
  "Array": "Add, remove, and replace items in lists.\n\nAdd, remove, and replace items in lists.",
  "Array.every": "Tests whether all elements in the array pass the test implemented by the provided function.",
  "Array.every|param|callbackfn": "A function that accepts up to two arguments. The every method calls the callbackfn function one time for each element in the array.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.forEach": "Call a defined callback function on each element of an array.",
  "Array.forEach|param|callbackfn": "A function that accepts up to two arguments. The forEach method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.join": "joins all elements of an array into a string and returns this string.",
  "Array.join|param|sep": "the string separator",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.some": "Tests whether at least one element in the array passes the test implemented by the provided function.",
  "Array.some|param|callbackfn": "A function that accepts up to two arguments. The some method calls the callbackfn function one time for each element in the array.",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Boolean.toString": "Returns a string representation of an object.",
  "Buffer.fill": "Fill (a fragment) of the buffer with given value.",
  "Buffer.getNumber": "Read a number in specified format from the buffer.",
  "Buffer.length": "Returns the length of a Buffer object.",
  "Buffer.rotate": "Rotate buffer left in place.\n\n\n\nstart. eg: -1",
  "Buffer.rotate|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.rotate|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.rotate|param|start": "start offset in buffer. Default is 0.",
  "Buffer.setNumber": "Write a number in specified format in the buffer.",
  "Buffer.shift": "Shift buffer left in place, with zero padding.\n\n\n\nstart. eg: -1",
  "Buffer.shift|param|length": "number of elements in buffer. If negative, length is set as the buffer length minus",
  "Buffer.shift|param|offset": "number of bytes to shift; use negative value to shift right",
  "Buffer.shift|param|start": "start offset in buffer. Default is 0.",
  "Buffer.slice": "Return a copy of a fragment of a buffer.",
  "Buffer.toHex": "Convert a buffer to its hexadecimal representation.",
  "Buffer.write": "Write contents of `src` at `dstOffset` in current buffer.",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.constrain": "Constrains a number to be within a range",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.icos": "Returns the cosine of an input angle. This is an 8-bit approximation.",
  "Math.icos|param|theta": "input angle from 0-255",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.isin": "Returns the sine of an input angle. This is an 8-bit approximation.",
  "Math.isin|param|theta": "input angle from 0-255",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.map": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range, eg: 1023",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range, eg: 4",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "value to map in ranges",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included.\nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.roundWithPrecision": "Rounds ``x`` to a number with the given number of ``digits``",
  "Math.roundWithPrecision|param|digits": "the number of resulting digits",
  "Math.roundWithPrecision|param|x": "the number to round",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "Number.toString": "Returns a string representation of a number.",
  "String": "Combine, split, and search text strings.\n\nCombine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "console": "Reading and writing data to the console output.",
  "console.addListener": "Adds a listener for the log messages",
  "console.log": "Write a line of text to the console output.",
  "console.logValue": "Write a name:value pair as a line of text to the console output.",
  "console.logValue|param|name": "name of the value stream, eg: \"x\"",
  "console.logValue|param|value": "to write",
  "control": "Program controls and events.",
  "control.AnimationQueue.cancel": "Cancels the current running animation and clears the queue",
  "control.AnimationQueue.runUntilDone": "Runs 'render' in a loop until it returns false or the 'stop' function is called",
  "control.assert": "Display an error code and stop the program when the assertion is `false`.",
  "control.createBuffer": "Create a new zero-initialized buffer.",
  "control.createBuffer|param|size": "number of bytes in the buffer",
  "control.deviceSerialNumber": "Derive a unique, consistent serial number of this device from internal data.",
  "control.eventContext": "Gets the current event context if any",
  "control.internalOnEvent": "Used internally",
  "control.millis": "Gets the number of milliseconds elapsed since power on.",
  "control.onEvent": "Run code when a registered event happens.",
  "control.onEvent|param|value": "the event value to match",
  "control.panic": "Display an error code and stop the program.",
  "control.panic|param|code": "an error number to display. eg: 5",
  "control.popEventContext": "Pops the current event context and restore handlers if any previous context",
  "control.pushEventContext": "Pushes a new event context and clears all handlers",
  "control.reset": "Reset the device.",
  "control.runInParallel": "Run other code in the parallel.",
  "control.waitForEvent": "Blocks the calling thread until the specified event is raised.",
  "control.waitMicros": "Block the current fiber for the given microseconds",
  "control.waitMicros|param|micros": "number of micro-seconds to wait. eg: 4",
  "forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "hex": "Tagged hex literal converter",
  "parseInt": "Convert a string to an integer.",
  "pause": "Pause for the specified time in milliseconds",
  "pauseUntil": "Busy wait for a condition to be true",
  "pauseUntil|param|condition": "condition to test for",
  "pauseUntil|param|timeOut": "if positive, maximum duration to wait for in milliseconds",
  "pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000"
}