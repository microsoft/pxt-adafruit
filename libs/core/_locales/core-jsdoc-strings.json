{
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.constrain": "Constrains a number to be within a range",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.icos": "Returns the cosine of an input angle. This is an 8-bit approximation.",
  "Math.icos|param|theta": "input angle from 0-255",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.isin": "Returns the sine of an input angle. This is an 8-bit approximation.",
  "Math.isin|param|theta": "input angle from 0-255",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.map": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range, eg: 1023",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range, eg: 4",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "value to map in ranges",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and `max`.",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "String.charAt": "Returns the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Returns the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "Determines whether relative order of two strings (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "control": "Program controls and events.",
  "control.allocateNotifyEvent": "Allocates the next user notification event",
  "control.assert": "Display specified error code and stop the program.",
  "control.deviceDalVersion": "Determine the version of system software currently running.",
  "control.deviceSerialNumber": "Derive a unique, consistent serial number of this device from internal data.",
  "control.millis": "Gets the number of milliseconds elapsed since power on.",
  "control.onEvent": "Run code when a registered event happens.",
  "control.onEvent|param|value": "the event value to match",
  "control.panic": "Display an error code and stop the program.",
  "control.panic|param|code": "an error number to display. eg: 5",
  "control.raiseEvent": "Announce that an event happened to registered handlers.",
  "control.raiseEvent|param|mode": "optional definition of how the event should be processed after construction.",
  "control.raiseEvent|param|src": "ID of the MicroBit Component that generated the event",
  "control.raiseEvent|param|value": "Component specific code indicating the cause of the event.",
  "control.reset": "Reset the device.",
  "control.runInBackground": "Run other code in the background.",
  "control.waitForEvent": "Blocks the calling thread until the specified event is raised.",
  "control.waitMicros": "Block the current fiber for the given microseconds",
  "control.waitMicros|param|micros": "number of micro-seconds to wait. eg: 4",
  "loops.forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "loops.pause": "Pause for the specified time in milliseconds",
  "loops.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.createBuffer": "Create a new zero-initialized buffer.",
  "pins.createBufferFromArray": "Create a new buffer initalized to bytes from given array.",
  "pins.createBufferFromArray|param|bytes": "data to initalize with",
  "pins.createBuffer|param|size": "number of bytes in the buffer",
  "pins.i2cReadBuffer": "Read `size` bytes from a 7-bit I2C `address`.",
  "pins.i2cReadNumber": "Read one number from an I2C address.",
  "pins.i2cWriteBuffer": "Write bytes to a 7-bit I2C `address`.",
  "pins.i2cWriteNumber": "Write one number to an I2C address.",
  "pins.pulseDuration": "Get the duration of the last pulse in microseconds. This function should be called from a\n``onPulsed`` handler.",
  "pins.sizeOf": "Get the size in bytes of specified number format.",
  "serial": "Reading and writing data over a serial connection.",
  "serial.writeBuffer": "Send a buffer across the serial connection.",
  "serial.writeLine": "Write a line of text to the serial port.",
  "serial.writeNumber": "Write a number to the serial port.",
  "serial.writeString": "Write some text to the serial port.",
  "serial.writeValue": "Write a name:value pair as a line of text to the serial port.",
  "serial.writeValue|param|name": "name of the value stream, eg: x",
  "serial.writeValue|param|value": "to write"
}