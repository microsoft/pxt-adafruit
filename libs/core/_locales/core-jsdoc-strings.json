{
  "AnalogInPin.analogRead": "Read the connector value as analog, that is, as a value comprised between 0 and 1023.",
  "AnalogOutPin.analogWrite": "Set the connector value as analog. Value must be comprised between 0 and 1023.",
  "AnalogOutPin.analogWrite|param|value": "value to write to the pin between ``0`` and ``1023``. eg:1023,0",
  "DigitalPin.digitalRead": "Read a pin or connector as either 0 or 1",
  "DigitalPin.digitalWrite": "Set a pin or connector value to either 0 or 1.",
  "DigitalPin.digitalWrite|param|value": "value to set on the pin",
  "DigitalPin.onPulsed": "Make this pin a digital input, and create events where the timestamp is the duration\nthat this pin was either ``high`` or ``low``.",
  "DigitalPin.pulseIn": "Return the duration of a pulse in microseconds",
  "DigitalPin.pulseIn|param|value": "the value of the pulse (default high)",
  "DigitalPin.setPull": "Set the pull direction of this pin.",
  "DigitalPin.setPull|param|pull": "one of the mbed pull configurations: PullUp, PullDown, PullNone",
  "PwmOnlyPin.analogSetPeriod": "Set the Pulse-width modulation (PWM) period of the analog output. The period is in\n**microseconds** or `1/1000` milliseconds.\nIf this pin is not configured as an analog output (using `analog write pin`), the operation has\nno effect.",
  "PwmOnlyPin.servoSetPulse": "Set the pin for PWM analog output, make the period be 20 ms, and set the pulse width.\nThe pulse width is based on the value it is given **microseconds** or `1/1000` milliseconds.",
  "PwmOnlyPin.servoSetPulse|param|duration": "pulse duration in micro seconds, eg:1500",
  "PwmOnlyPin.servoWrite": "Write a value to the servo to control the rotation of the shaft. On a standard servo, this will\nset the angle of the shaft (in degrees), moving the shaft to that orientation. On a continuous\nrotation servo, this will set the speed of the servo (with ``0`` being full-speed in one\ndirection, ``180`` being full speed in the other, and a value near ``90`` being no movement).",
  "PwmOnlyPin.servoWrite|param|value": "angle or rotation speed, eg:180,90,0",
  "control": "Program controls and events.",
  "control.Timer": "A timer",
  "control.Timer.millis": "Gets the elapsed time in millis since the last reset",
  "control.Timer.pauseUntil": "Pauses until the timer reaches the given amount of milliseconds",
  "control.Timer.pauseUntil|param|ms": "how long to pause for, eg: 5, 100, 200, 500, 1000, 2000",
  "control.Timer.reset": "Resets the timer",
  "control.Timer.seconds": "Gets the elapsed time in seconds since the last reset",
  "control.allocateNotifyEvent": "Allocates the next user notification event",
  "control.deviceDalVersion": "Determine the version of system software currently running.",
  "control.dmesg": "Write a message to DMESG debugging buffer.",
  "control.dmesgPtr": "Write a message and value (pointer) to DMESG debugging buffer.",
  "control.raiseEvent": "Announce that an event happened to registered handlers.",
  "control.raiseEvent|param|src": "ID of the MicroBit Component that generated the event",
  "control.raiseEvent|param|value": "Component specific code indicating the cause of the event.",
  "msgpack.packNumberArray": "Pack a number array into a buffer.",
  "msgpack.packNumberArray|param|nums": "the numbers to be packed",
  "msgpack.unpackNumberArray": "Unpacks a buffer into a number array.",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.createBuffer": "Create a new zero-initialized buffer.",
  "pins.createBufferFromArray": "Create a new buffer initalized to bytes from given array.",
  "pins.createBufferFromArray|param|bytes": "data to initalize with",
  "pins.createBuffer|param|size": "number of bytes in the buffer",
  "pins.i2cReadBuffer": "Read `size` bytes from a 7-bit I2C `address`.",
  "pins.i2cReadNumber": "Read one number from an I2C address.",
  "pins.i2cWriteBuffer": "Write bytes to a 7-bit I2C `address`.",
  "pins.i2cWriteNumber": "Write one number to an I2C address.",
  "pins.pulseDuration": "Get the duration of the last pulse in microseconds. This function should be called from a\n``onPulsed`` handler.",
  "pins.sizeOf": "Get the size in bytes of specified number format."
}