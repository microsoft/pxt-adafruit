{
  "JDGesture.FaceDown": "Raised when the screen is pointing up and the board is horizontal",
  "JDGesture.FaceUp": "Raised when the screen faces up",
  "JDGesture.FreeFall": "Raised when the board is falling!",
  "JDGesture.Shake": "Raised when shaken",
  "JDGesture.TiltDown": "Raised when the device tilts down",
  "JDGesture.TiltLeft": "Raised when the screen is pointing left",
  "JDGesture.TiltRight": "Raised when the screen is pointing right",
  "JDGesture.TiltUp": "Raised when the device tilts up",
  "JacDacDriverStatus.device": "Returns the JDDevice instance",
  "JacDacDriverStatus.id": "Get device id for events.",
  "JacDacDriverStatus.isConnected": "Check if driver is connected.",
  "JacDacDriverStatus.isPairedInstanceAddress": "If paired, paired instance address",
  "JacDacDriverStatus.setBridge": "Set driver as bridge",
  "JacDacDriverStatus.setError": "Sets the error state on the device",
  "jacdac": "A Joint Asynchronous Communications, Device Agnostic Control.\n\nJACDAC protocol support",
  "jacdac.Client.setSerialNumber": "Specifies the serial number that this virtual driver should bind to",
  "jacdac.ConsoleService": "Console logging driver. The driver is off, broadcasting or listening. Cannot do both.",
  "jacdac.ConsoleService.setMode": "Sets the console service mode",
  "jacdac.ControllerClient.onStateUpdate": "Register code to run when the state is about to be sent",
  "jacdac.Driver.handleControlPacket": "Called by the logic driver when a control packet is received",
  "jacdac.Driver.handlePacket": "Called by the logic driver when a data packet is addressed to this driver\nReturn false when the packet wasn't handled here.",
  "jacdac.Driver.onDriverEvent": "Registers code to run a on a particular event",
  "jacdac.Driver.onDriverEvent|param|event": "@param handler ",
  "jacdac.Driver.start": "Register and starts the driver",
  "jacdac.JDDevice.isBroadcastDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the BroadcastDriver mode specified in the DriverType enumeration.\n* @returns true if in BroadcastDriver mode.",
  "jacdac.JDDevice.isConnected": "Indicates if the driver is connected on the bus",
  "jacdac.JDDevice.isConnecting": "Indicates if the driver is connecting on the bus",
  "jacdac.JDDevice.isHostDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the HostDriver mode specified in the DriverType enumeration.\n* @returns true if in SnifferDriver mode.",
  "jacdac.JDDevice.isPairable": "Indicates if the driver can be currently paired to another.\n* @returns true if pairable",
  "jacdac.JDDevice.isPaired": "Indicates if the driver is currently paired to another.\n* @returns true if paired",
  "jacdac.JDDevice.isPairedDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the PairedDriver mode specified in the DriverType enumeration.\n* @returns true if in PairedDriver mode.",
  "jacdac.JDDevice.isPairing": "Indicates if the driver is currently in the process of pairing to another.\n* @returns true if pairing",
  "jacdac.JDDevice.isSnifferDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the SnifferDriver mode specified in the DriverType enumeration.\n* @returns true if in SnifferDriver mode.",
  "jacdac.JDDevice.isVirtualDriver": "Used to determine what mode the driver is currently in.\n* This will check to see if the flags field resembles the VirtualDriver mode specified in the DriverType enumeration.\n* @returns true if in VirtualDriver mode.",
  "jacdac.MessageBusService": "A driver that listens for message bus events",
  "jacdac.SensorService": "JacDac service running on sensor and streaming data out",
  "jacdac.broadcastEvent": "Pipes specific events through JACDAC",
  "jacdac.clearBridge": "Clears any existing bridge",
  "jacdac.deviceName": "Gets the current device name",
  "jacdac.drivers": "Gets the list of drivers and their status in JACDAC",
  "jacdac.eventId": "Gets the jacdac event id",
  "jacdac.isConnected": "true if connected, false if there's a bad bus condition.",
  "jacdac.isRunning": "Indicates if JacDac is running",
  "jacdac.logicEventId": "Gets the jacdac logic driver event id",
  "jacdac.onReceivedMessage": "Registers code to run for a particular message",
  "jacdac.onReceivedMessage|param|msg": "@param handler ",
  "jacdac.raiseEvent": "Sends an event over JacDac",
  "jacdac.sendMessage": "Broadcasts a message over JacDac",
  "jacdac.sendPacket": "Sends a packet",
  "jacdac.sendPacket|param|pkt": "jackdack data",
  "jacdac.setDeviceName": "Sets a friendly name for the device",
  "jacdac.start": "Starts the JacDac protocol",
  "jacdac.state": "Gets the bus state",
  "jacdac.stop": "Starts the JacDac protocol"
}